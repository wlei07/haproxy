# Global settings
global
    log stdout format raw local0 debug                  # Log to stdout (Docker-friendly)
    maxconn 2048                           # Maximum number of connections
    daemon                                 # Run in the background
    stats socket /tmp/haproxy.sock mode 600 level admin
    node lei-haproxy

# Default settings for all listeners and backends
defaults
    log global                             # Use global log settings
    mode http                              # Default to HTTP mode
    option dontlognull                     # Don't log null connections
    log-format              %ci:%cp\ [%t]\ %ft\ %b\ %ST\ %hr\ %hs\ %{+Q}r\ X-Correlation-ID:%[capture.req.hdr(0)]
    # option httplog                         # Enable HTTP logging
    # add HTTP header 'X-Forwarded-For' with the source ip address
    option forwardfor # except 127.0.0.0/8
    retries 3                              # Retry 3 times before marking a server down
    timeout connect 5s                     # Max time to connect to backend
    timeout client 50s                     # Max inactivity time on the client side
    timeout server 50s                     # Max inactivity time on the server side
    timeout http-request 10s               # Timeout for HTTP requests
    timeout http-keep-alive 10s            # Timeout for HTTP keep-alive
frontend www_https
    bind *:8443 ssl crt /etc/haproxy/ssl/combined.pem
    # reqadd X-Forwarded-Proto:\ https
    default_backend web_servers

# Frontend: Public-facing entry point
frontend http_front
    bind *:8088

    # Set X-Correlation-ID early
    http-request set-header X-Correlation-ID %[uuid]
    # Capture X-Correlation-ID for logging
    http-request capture req.hdr(X-Correlation-ID) len 64

    # acl aclname criterion [flags] [operators] [pattern]
    # -i mean case insensitive
    acl url_static path_beg -i /static /images /javascript /stylesheets
    acl url_static path_end -i .jpg .gif .png .css .js
    use_backend static if url_static
    default_backend web_servers

backend static
    balance roundrobin
    server httpd1 172.10.0.2:80 check

# Backend: Set of web servers
backend web_servers
    # Use round-robin load balancing
    balance roundrobin

    # load balance by url_param, so that a userid with the same value will be forwarded to the same backend server
    # balance url_param userid

    # hdr means header field of the HTTP request
    # balance hdr(User-Agent)

    # always reach to the first server unless the first server reached the max number of connections.
    # balance first

    # depends on the source ip address
    # balance source

    # host with least connection
    # balance leastconn

    # add a cookie with name SRVNAME to all HTTP responses, the value will be either S01 or S02 as defined in the server part
    # cookie SRVNAME insert
    # check means with health check, cookie S01 means setting response cookie SRVNAME=S01 or S02
    server httpd1 172.10.0.2:80 cookie S01 maxconn 1000 check
    server httpd2 172.10.0.3:80 cookie S02 check
    # Server 2 as backup server, this way, when you test by shutting down the 1st server, 2nd server will be used.
    # server httpd2 172.10.0.3:80 backup

# Optional: Enable HAProxy stats page, this could also be directly under frontend section
listen stats
    bind *:8081                            # Stats page accessible on port 8081
    stats enable
    # Basic auth (username: admin, password: password)
    # stats auth admin:password
    # stats hide-version
    stats show-node
    stats refresh 60s
    stats uri /stats                       # Access the stats at /stats
    stats admin if LOCALHOST               # Admin access only from localhost
